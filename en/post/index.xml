<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog on T. S. Grigera</title>
    <link>https://tgrigera.github.io/en/post/</link>
    <description>Recent content in Blog on T. S. Grigera</description>
    <generator>Source Themes academia (https://sourcethemes.com/academic/)</generator>
    <language>en-us</language>
    <copyright>&amp;copy; T. S. Grigera {year}</copyright>
    <lastBuildDate>Sat, 18 Jul 2020 00:00:00 +0000</lastBuildDate>
    
	    <atom:link href="https://tgrigera.github.io/en/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Creating a personal website with Hugo</title>
      <link>https://tgrigera.github.io/en/post/hugo-site-i/</link>
      <pubDate>Sat, 18 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://tgrigera.github.io/en/post/hugo-site-i/</guid>
      <description>
&lt;p&gt;
Until recently I built my personal webpage with &lt;a href=&#34;https://getnikola.com&#34;&gt;Nikola&lt;/a&gt; (see
&lt;a href=&#34;https://tgrigera.github.io/post/how-i-created-my-homepage/&#34;&gt;this post&lt;/a&gt;).  However I decided to change that when moving to GitHub
pages, in part because I thought &lt;a href=&#34;https://jekyllrb.com/&#34;&gt;Jekyll&lt;/a&gt; would be easier to use on
GitHub, in part because after a Nikola upgrade the theme I was using
broke and didn&amp;#39;t know how to fix it.  The problem is probably
ignorance on my part more than anything else.  I am no expert on web
publishing and can&amp;#39;t afford to become one, I just need to put up a
decent website (and I hate CMSs).&lt;/p&gt;
&lt;p&gt;
However, reading Jekyll documentation scared me a bit, and a dear
&lt;a href=&#34;http://manuxch.github.io&#34;&gt;colleague&lt;/a&gt; pointed me to &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;.  I followed his suggestion, and I
managed to set up a rather nice, if not perfect, website.  Now that
it&amp;#39;s done, it seems I have a setup where I can easily enough create
and update content in a bunch of plain text files (stored in GitHub),
quickly create a site and publish it through GitHub pages.  However,
I&amp;#39;d lie if I said setting it up was a breeze.  I am certainly no web
expert, but I have been around computers for a while (my first
encounter with them was through my father&amp;#39;s TRS-80 Model I), and this
is not my first time with a static web site generator.  Yet I had a
hard time at first.&lt;/p&gt;
&lt;p&gt;
So I decided to write this summary of my experience and what I gather
about how Hugo works.  It will serve mainly for my own reference, but
it might also be useful to others, so I publish it here.  When the
Hugo docs failed me (which at first was very often), I found much help
in &lt;a href=&#34;https://www.sarasoueidan.com/blog/jekyll-ghpages-to-hugo-netlify/&#34;&gt;this post&lt;/a&gt; from &lt;a href=&#34;https://www.sarasoueidan.com&#34;&gt;Sara Souiedan&amp;#39;s&lt;/a&gt; blog, and in &lt;a href=&#34;https://jpdroege.com/blog/hugo-file-organization/&#34;&gt;this one&lt;/a&gt; by
&lt;a href=&#34;https://jpdroege.com/&#34;&gt;J. P. Droege&lt;/a&gt;.&lt;/p&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
Understanding Hugo
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
My main problem with Hugo is documentation.  Not the not lack of
documentation: there is plenty of it.  However, it seems designed to
explain Hugo a detail at a time, and there is no &amp;#34;high-level&amp;#34; or
big-picture summary of how Hugo works, and how a source directory
structure is turned into a web site.  There are also very detailed
guides to install and work with a particular theme.  In fact I started
with one of those, which is fine if you plan to use the theme exactly
as it comes.  However, as soon as I wanted to tweak a minor detail, I
stumbled due to lack of understanding of how Hugo interprets your
source.  What follows is what I eventually gathered, from the
mentioned blog posts, the docs, and a lot of trial and error.&lt;/p&gt;
&lt;p&gt;
This is not intended as a guide to use Hugo to build a complete web
site from scratch.  I don&amp;#39;t know enough to do that, and I am using a
theme, which fills in the CSSs and other stuff needed to get a
nice-looking site.  I am just trying to get enough understanding of
Hugo&amp;#39;s workings to be able to do good use of a theme (note again that
I&amp;#39;m not an expert and I could be wrong in what I say, and that I will
be happy to stand corrected if someone with more knowledge cares to
leave a comment).&lt;/p&gt;
&lt;p&gt;
After installing Hugo (I did so through my Linux distro package
manager), one creates a bare working tree (starting at, say,
&lt;code class=&#34;verbatim&#34;&gt;./test/&lt;/code&gt;) with the directory structure Hugo expects with&lt;/p&gt;
&lt;pre class=&#34;example&#34;&gt;
hugo new site test
cd test
&lt;/pre&gt;
&lt;p&gt;
Essentially, Hugo will create a site in the &lt;code class=&#34;verbatim&#34;&gt;public/&lt;/code&gt; directory by
applying a series of transformations to the content of the &lt;code class=&#34;verbatim&#34;&gt;content/&lt;/code&gt;
directory.  These transformations involve various things I don&amp;#39;t
understand completely, but basically Hugo reads your content from a
source tree starting at &lt;code class=&#34;verbatim&#34;&gt;content/&lt;/code&gt;, plus a set of templates (which you
write or get as part of a theme) and a set of data (defined in the
header of the source file themselves or in various configuration
files) and writes &lt;code class=&#34;verbatim&#34;&gt;.html&lt;/code&gt; files to &lt;code class=&#34;verbatim&#34;&gt;pulibc/&lt;/code&gt;.  Additional files needed
for the site (like images and &lt;code class=&#34;verbatim&#34;&gt;.css&lt;/code&gt;) are copied as-is from the
&lt;code class=&#34;verbatim&#34;&gt;static/&lt;/code&gt; directory.  The templates (though Hugo does not call them
that, but layouts or archetypes) and other stuff that formats your
content (and in principle does not change as often) are in
&lt;code class=&#34;verbatim&#34;&gt;archetypes/&lt;/code&gt; and &lt;code class=&#34;verbatim&#34;&gt;layouts/&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;
The site is created when you invoke &lt;code class=&#34;verbatim&#34;&gt;hugo&lt;/code&gt; on the root of your source
site.  To draft and debug the site, you can call &lt;code class=&#34;verbatim&#34;&gt;hugo serve&lt;/code&gt; and your
site is served locally, and automatically updated upon any source tree
change (and very fast).  This is a great feature.&lt;/p&gt;
&lt;p&gt;
Source files are normally written in some markup language that makes
your life easy.  Markdown (&lt;code class=&#34;verbatim&#34;&gt;.md&lt;/code&gt;) seems to be the standard for
Hugo. I&amp;#39;m a fan of &lt;a href=&#34;https://www.gnu.org/software/emacs/emacs.html&#34;&gt;Emacs&lt;/a&gt; and &lt;a href=&#34;http://orgmode.org&#34;&gt;Orgmode&lt;/a&gt;, and luckily Hugo supports that
too, probably along with others I know nothing about (&lt;code&gt;orgmode&lt;/code&gt; users
may find better to use &lt;a href=&#34;https://ox-hugo.scripter.co/&#34;&gt;ox-hugo&lt;/a&gt;, which exports &lt;code&gt;orgmode&lt;/code&gt; to
Hugo-tailored Markdown, but I&amp;#39;m not doing this so far).  These source
files typically start with a header (&amp;#34;front matter&amp;#34;) that defines
variables (aka metadata) that help Hugo decide how to process the file
and supply information like date or title for the page.  This header
basically consists in key, value pairs and is written in &lt;code class=&#34;verbatim&#34;&gt;toml&lt;/code&gt;,
&lt;code class=&#34;verbatim&#34;&gt;yaml&lt;/code&gt;, &lt;code class=&#34;verbatim&#34;&gt;json&lt;/code&gt; (like the configuration files).  I don&amp;#39;t really know
any of these, but I use &lt;code class=&#34;verbatim&#34;&gt;toml&lt;/code&gt; which is quite intuitive and easy to
pick up from the examples.  In the case of &lt;code class=&#34;verbatim&#34;&gt;.org&lt;/code&gt; files, it is also
possible to use a syntax similar to &lt;code&gt;org&lt;/code&gt; properties.&lt;/p&gt;
&lt;p&gt;
In principle, every file in &lt;code class=&#34;verbatim&#34;&gt;content/&lt;/code&gt; becomes a page, but I do not
understand all the rules about the process.  What I can say is that
&lt;code class=&#34;verbatim&#34;&gt;content/_index.md&lt;/code&gt; (or &lt;code class=&#34;verbatim&#34;&gt;content/_index.org&lt;/code&gt;, in all cases I&amp;#39;ve tried,
&lt;code class=&#34;verbatim&#34;&gt;.org&lt;/code&gt; files work just as well as &lt;code class=&#34;verbatim&#34;&gt;.md&lt;/code&gt; files, I will not mention this
equivalence again) produces your home, or landing, page.  But for this
to happen, Hugo needs an appropriate template (or layout) file in
&lt;code class=&#34;verbatim&#34;&gt;layouts/&lt;/code&gt;.  For the home page, the appropriate layout is
&lt;code class=&#34;verbatim&#34;&gt;index.html&lt;/code&gt;.  You don&amp;#39;t get a page if there is no layout.  And,
probably because the home page is special, the &lt;code class=&#34;verbatim&#34;&gt;index.html&lt;/code&gt; turns out
to be processed even if there is no &lt;code class=&#34;verbatim&#34;&gt;_index.md&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve succeeded in getting a home page using the following two files: &lt;/p&gt;
&lt;p&gt;
A &lt;code class=&#34;verbatim&#34;&gt;content/_index.org&lt;/code&gt; file:&lt;/p&gt;
&lt;div class=&#34;src src-org&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-org&#34; data-lang=&#34;org&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#+Title&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;: &amp;#34;My nice home page&amp;#34;&lt;/span&gt;

*&lt;span style=&#34;font-weight:bold&#34;&gt; I write in Emacs&lt;/span&gt;

And this is my nice &lt;span style=&#34;color:#a6e22e&#34;&gt;=_index.org=&lt;/span&gt; file.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
and a &lt;code class=&#34;verbatim&#34;&gt;layouts/index.html&lt;/code&gt; file:&lt;/p&gt;
&lt;div class=&#34;src src-html&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;header&lt;/span&gt;&amp;gt;  The page title is  {{ .Title }} &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;header&lt;/span&gt;&amp;gt;

And more layout stuff...

{{ .Content }}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
As you see, the layout file is written in a mixture of &lt;code class=&#34;verbatim&#34;&gt;html&lt;/code&gt; and
stuff between braces that calls in content (and executes functions).
To quote the &lt;a href=&#34;https://gohugo.io/templates/introduction/&#34;&gt;documentation&lt;/a&gt;, &amp;#34;Hugo uses Go’s &lt;code class=&#34;verbatim&#34;&gt;html/template&lt;/code&gt; and
&lt;code class=&#34;verbatim&#34;&gt;text/template&lt;/code&gt; libraries as the basis for the templating.&amp;#34;  This is
all I know, but it has proved enough to make small tweaks to the
layouts provided by the themes.&lt;/p&gt;
&lt;p&gt;
Now let&amp;#39;s try a regular static page.  Create a &lt;code class=&#34;verbatim&#34;&gt;normalpage.org&lt;/code&gt; file
in &lt;code class=&#34;verbatim&#34;&gt;content/&lt;/code&gt; with a single-line content.  To produce a page from this
file, again Hugo needs a template (if you run &lt;code class=&#34;verbatim&#34;&gt;hugo&lt;/code&gt; at this point,
Hugo will complain &lt;code&gt;found no layout file for &amp;#34;HTML&amp;#34; for kind
&amp;#34;page&amp;#34;&lt;/code&gt;).  There are certain rules to match a source file to a
template, and they depend on the &lt;em&gt;kind&lt;/em&gt; of the page.  I haven&amp;#39;t
completely figured out the rules to establish the kind of the page.
Apparently, &lt;code class=&#34;verbatim&#34;&gt;content/_index.md&lt;/code&gt; is a kind of it&amp;#39;s own.  The other
pages in &lt;code class=&#34;verbatim&#34;&gt;content/&lt;/code&gt; (but not in subdirectories, see below) are, at
least by default, of kind &amp;#34;page&amp;#34;, and the corresponding layout is
&lt;code class=&#34;verbatim&#34;&gt;layouts/_default/single.html&lt;/code&gt;.  Putting in this file just&lt;/p&gt;
&lt;pre class=&#34;example&#34;&gt;
{{ .Content }}
&lt;/pre&gt;
&lt;p&gt;I got the page to be served at &lt;code class=&#34;verbatim&#34;&gt;localhost:1313/normalpage/&lt;/code&gt;.  Now I
can link to it from the home page:&lt;/p&gt;
&lt;div class=&#34;src src-org&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-org&#34; data-lang=&#34;org&#34;&gt; a [[&lt;span style=&#34;color:#a6e22e&#34;&gt;./normalpage&lt;/span&gt;][&lt;span style=&#34;color:#f92672&#34;&gt;nice&lt;/span&gt;]] link&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
I found I could get Hugo to tell me what kind it is assigning to pages
by adding this line to each layout:&lt;/p&gt;
&lt;pre class=&#34;example&#34;&gt;
My kind is {{ .Kind }}
&lt;/pre&gt;
&lt;p&gt;This turned out to be very useful; this way I learned that the home
page (&lt;code&gt;_index.org&lt;/code&gt;) is of kind &lt;code class=&#34;verbatim&#34;&gt;home&lt;/code&gt;, and confirmed that
&lt;code class=&#34;verbatim&#34;&gt;/content/normalpage.org&lt;/code&gt; is of kind &lt;code class=&#34;verbatim&#34;&gt;page&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;
As a next level I add a subdirectory &lt;code&gt;/content/blog&lt;/code&gt; and again a
one-liner &lt;code&gt;something.org&lt;/code&gt; file.  Now Hugo complains about lack of
layout for kinds &amp;#34;section&amp;#34; and &amp;#34;taxonomyTerm&amp;#34;.  The page
&lt;code&gt;http://localhost:1313/blog/&lt;/code&gt; appears empty, although
&lt;code&gt;http://localhost:1313/blog/something&lt;/code&gt; displays my one-liner (which
turns out to also be of kind &lt;code class=&#34;verbatim&#34;&gt;page&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;
Adding an &lt;code class=&#34;verbatim&#34;&gt;index.org&lt;/code&gt; page in &lt;code class=&#34;verbatim&#34;&gt;content/blog&lt;/code&gt; makes content appear on
&lt;code&gt;blog/&lt;/code&gt; (of kind &lt;code class=&#34;verbatim&#34;&gt;page&lt;/code&gt;, i.e. using our &lt;code class=&#34;verbatim&#34;&gt;single.html&lt;/code&gt; template).  If
instead you name the file &lt;code class=&#34;verbatim&#34;&gt;_index.org&lt;/code&gt;, then it is interpreted as of
kind &lt;code class=&#34;verbatim&#34;&gt;section&lt;/code&gt;, and processed with a &lt;code class=&#34;verbatim&#34;&gt;list.html&lt;/code&gt; layout.  Normally
this layout is written so that it displays a nice table of contents,
or summary page, of all the files contained in the directory (which
will be in any case translated to pages, but now they are
automatically linked to).  I don&amp;#39;t know how to write a template like
this, but I don&amp;#39;t need to since I will be using a theme anyway (you
can see an example in Sara&amp;#39;s post).  Apparently, if you include neither
&lt;code class=&#34;verbatim&#34;&gt;index.md&lt;/code&gt; nor &lt;code class=&#34;verbatim&#34;&gt;_index.md&lt;/code&gt;, Hugo assumes an empty &lt;code class=&#34;verbatim&#34;&gt;_index.md&lt;/code&gt; anyway
(as in the case for the home page) and tries to read the &lt;code class=&#34;verbatim&#34;&gt;list.html&lt;/code&gt;
template, which would explain why it complained about the lack of a
section layout when I put only a single file in &lt;code class=&#34;verbatim&#34;&gt;blog&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;
Up to now I have placed the layouts under &lt;code class=&#34;verbatim&#34;&gt;_default&lt;/code&gt;, but if you put
layouts in &lt;code class=&#34;verbatim&#34;&gt;layouts/blog&lt;/code&gt;, then Hugo will use those instead when
reading &lt;code class=&#34;verbatim&#34;&gt;content/blog&lt;/code&gt;.  I also succeeded in using the &lt;code class=&#34;verbatim&#34;&gt;blog/&lt;/code&gt; layouts
from another subdirectory by setting&lt;/p&gt;
&lt;pre class=&#34;example&#34;&gt;
#+type: blog
&lt;/pre&gt;
&lt;p&gt;in the front matter.&lt;/p&gt;
&lt;p&gt;
Armed with this basic knowledge (admittedly sketchy and incomplete), I
felt confident enough to finally download a theme and start tweaking
it to my taste.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
Installing a theme
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
I decided to try the &lt;a href=&#34;https://themes.gohugo.io/academia-hugo/&#34;&gt;Academia Hugo&lt;/a&gt; theme:&lt;/p&gt;
&lt;div class=&#34;src src-sh&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;hugo new site personal
cd personal
git init .
cd themes/
git submodule add https://github.com/themefisher/academia-hugo.git&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Themes come with their set of layouts and static stuff that gives the
site the final appearance.  Hugo can get the layouts directly from the
theme directory instead of using your &lt;code class=&#34;verbatim&#34;&gt;layouts/&lt;/code&gt; directory.  To use
the theme you need to point Hugo to it from the configuration
parameters.  These are written as &lt;code class=&#34;verbatim&#34;&gt;toml&lt;/code&gt;, &lt;code class=&#34;verbatim&#34;&gt;yaml&lt;/code&gt; or &lt;code class=&#34;verbatim&#34;&gt;json&lt;/code&gt; files, either
in the single file &lt;code class=&#34;verbatim&#34;&gt;config.toml&lt;/code&gt; or in several files in
&lt;code class=&#34;verbatim&#34;&gt;config/_default&lt;/code&gt;.  I follow the second approach.&lt;/p&gt;
&lt;pre class=&#34;example&#34;&gt;
mkdir -p config/_default
mv config.toml config/_default/
&lt;/pre&gt;
&lt;p&gt;
Adding the line&lt;/p&gt;
&lt;pre class=&#34;example&#34;&gt;
theme = &amp;#34;academia-hugo&amp;#34;
&lt;/pre&gt;
&lt;p&gt;makes Hugo aware of the theme.&lt;/p&gt;
&lt;p&gt;
Academia Hugo &amp;#34;hijacks&amp;#34; the home page (and this caused me a lot of
confusion at first): its home layout (i.e. &lt;code class=&#34;verbatim&#34;&gt;layouts/index.htm&lt;/code&gt;)
ignores any content you care to write in &lt;code class=&#34;verbatim&#34;&gt;_index.md&lt;/code&gt; and instead
includes a &lt;code class=&#34;verbatim&#34;&gt;widget_page.html&lt;/code&gt; layout which looks for content in
&lt;code class=&#34;verbatim&#34;&gt;content/home&lt;/code&gt; (including layout files within another is apparently
called working with &lt;em&gt;partials&lt;/em&gt; in Hugo jargon).  So we must start
populating this directory.  But first, note that I am building a
dual-language site.  Hugo supports this; essentially by placing the
source for each language in parallel trees in &lt;code class=&#34;verbatim&#34;&gt;content/&lt;/code&gt; (and setting
some configuration variables).  So I create the directories for
languages:&lt;/p&gt;
&lt;pre class=&#34;example&#34;&gt;
mkdir -p content/en/home
mkdir -p content/es/home
&lt;/pre&gt;
&lt;p&gt;
Now copy the configuration files &lt;code&gt;config.toml&lt;/code&gt;, &lt;code&gt;languages.toml&lt;/code&gt; and
&lt;code&gt;params.toml&lt;/code&gt; from the theme&amp;#39;s &lt;code class=&#34;verbatim&#34;&gt;exampleSite&lt;/code&gt; directory and start
changing the parameters.  In particular add in &lt;code class=&#34;verbatim&#34;&gt;config.toml&lt;/code&gt;,&lt;/p&gt;
&lt;div class=&#34;src src-toml&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;defaultContentLanguage&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;en&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;hasCJKLanguage&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# Set `true` for Chinese/Japanese/Korean languages.&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;defaultContentLanguageInSubdir&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;removePathAccents&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# Workaround for https://github.com/gohugoio/hugo/issues/5687&lt;/span&gt;

[&lt;span style=&#34;color:#a6e22e&#34;&gt;languages&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;en&lt;/span&gt;]
  &lt;span style=&#34;color:#a6e22e&#34;&gt;languageCode&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;en-us&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;contentDir&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;content/en&amp;#34;&lt;/span&gt;

[&lt;span style=&#34;color:#a6e22e&#34;&gt;languages&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;es&lt;/span&gt;]
  &lt;span style=&#34;color:#a6e22e&#34;&gt;languageCode&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;es-ar&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;contentDir&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;content/es&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Actually the language part I put in a different file, called
&lt;code class=&#34;verbatim&#34;&gt;languages.toml&lt;/code&gt;, which has the advantage that you can say &lt;code class=&#34;verbatim&#34;&gt;[en]&lt;/code&gt;
instead of &lt;code class=&#34;verbatim&#34;&gt;[languages.en]&lt;/code&gt; at the beginning of the section, because
all the contents of &lt;code class=&#34;verbatim&#34;&gt;languages.toml&lt;/code&gt; are interpreted as if defined
inside a &lt;code class=&#34;verbatim&#34;&gt;[languages]&lt;/code&gt; section.&lt;/p&gt;
&lt;p&gt;
Now place an empty &lt;code class=&#34;verbatim&#34;&gt;index.md&lt;/code&gt; in each language &lt;code class=&#34;verbatim&#34;&gt;home/&lt;/code&gt;. At this point
&lt;code class=&#34;verbatim&#34;&gt;hugo serve -D&lt;/code&gt; displays a site with a header and footer but otherwise
empty.&lt;/p&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-3&#34;&gt;
Populating the home page
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-3&#34;&gt;
&lt;p&gt;
The home (or landing) page is made from &amp;#34;widgets&amp;#34;, which can be copied
and tweaked from the theme&amp;#39;s example site.  Many widgets completely
ignore any content and work only from the front matter, taking custom
data from various parameter files.  I try to avoid this approach,
which resembles too much a CMS, but I accepted it for the &lt;code class=&#34;verbatim&#34;&gt;about.md&lt;/code&gt;
widget.  I copied it from the example site to each of the &lt;code class=&#34;verbatim&#34;&gt;home/&lt;/code&gt;
directories.  To work, this widget requires data stored in
&lt;code class=&#34;verbatim&#34;&gt;home/authors/admin/_index.md&lt;/code&gt;.  Copy and edit from the example site;
after the front matter, text can be added in &lt;code class=&#34;verbatim&#34;&gt;.md&lt;/code&gt; format that will be
displayed by the widget.&lt;/p&gt;
&lt;p&gt;
I added an intro (&lt;code class=&#34;verbatim&#34;&gt;first.md&lt;/code&gt;) by copying from the blank widget.  Note
that the &lt;code class=&#34;verbatim&#34;&gt;weight&lt;/code&gt; parameter is used to select the order in which the
widgets appear.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-4&#34;&gt;
Menu
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-4&#34; class=&#34;outline-text-3&#34;&gt;
&lt;p&gt;
The theme comes with a menu, adding to it is done through the
configuration files.  You can follow the theme&amp;#39;s example, only that
for multilingual sites the definitions must go in the &lt;code class=&#34;verbatim&#34;&gt;[languages]&lt;/code&gt;
section (or &lt;code class=&#34;verbatim&#34;&gt;langauges.toml&lt;/code&gt; file):&lt;/p&gt;
&lt;div class=&#34;src src-toml&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;[[&lt;span style=&#34;color:#a6e22e&#34;&gt;en&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;menu&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;]]
  &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Home&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;url&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#first&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;weight&lt;/span&gt; = &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;

[[&lt;span style=&#34;color:#a6e22e&#34;&gt;es&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;menu&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;]]
  &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Home&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;url&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#first&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;weight&lt;/span&gt; = &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;etc.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-5&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-5&#34;&gt;
The teaching page
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-5&#34; class=&#34;outline-text-3&#34;&gt;
&lt;p&gt;
I want a static &amp;#34;subsite&amp;#34; rendered from a source tree starting at
&lt;code class=&#34;verbatim&#34;&gt;/es/docencia&lt;/code&gt; (in the Spanish branch).  I want to put each course in
a separate subdirectory so that material for different courses will be
cleanly organized in source.  Hugo allows this, but it appears that if
you put an &lt;code class=&#34;verbatim&#34;&gt;index.md&lt;/code&gt; file in &lt;code class=&#34;verbatim&#34;&gt;content/es/docencia&lt;/code&gt;, the
subdirectories are ignored.  If you put a &lt;code class=&#34;verbatim&#34;&gt;_index.md&lt;/code&gt; file, or
nothing, subdirectories are read, and a summary page is generated.
However, I didn&amp;#39;t like the automatic summary page and I wanted to
write my own.  I haven&amp;#39;t figured out how to avoid the automatic
summary page, so I ended up writing my own in
&lt;code class=&#34;verbatim&#34;&gt;es/docencia/docencia.org&lt;/code&gt;.  This page appears at
&lt;code class=&#34;verbatim&#34;&gt;es/docencia/docencia&lt;/code&gt;, and the automatic summary at &lt;code class=&#34;verbatim&#34;&gt;es/docencia&lt;/code&gt;.  I
simply avoided any links to the automatic summary, and link directly
from the menu to &lt;code class=&#34;verbatim&#34;&gt;es/docencia/docencia&lt;/code&gt;.  The default type for these
pages seems to be &lt;code class=&#34;verbatim&#34;&gt;post&lt;/code&gt;, which causes the theme to output a signature
at the bottom (a bit redundant, since this is a personal site).  I
avoided this by setting the type to &lt;code class=&#34;verbatim&#34;&gt;page&lt;/code&gt; in the front matter:&lt;/p&gt;
&lt;div class=&#34;src src-org&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-org&#34; data-lang=&#34;org&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#+title&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;: Docencia&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#+type&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;: page&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#+date&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;: 2020-07-17&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;I could easily add PDF files with course material and link to them
just placing them alongside the &lt;code class=&#34;verbatim&#34;&gt;.org&lt;/code&gt; files in &lt;code class=&#34;verbatim&#34;&gt;content/&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-6&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-6&#34;&gt;
Blog
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-6&#34; class=&#34;outline-text-3&#34;&gt;
&lt;p&gt;
The blog part worked out of the box by creating entries in a &lt;code class=&#34;verbatim&#34;&gt;posts&lt;/code&gt;
subdirectory.  You can use one file per post, or one directory per
post (useful I think to attach images and such).  In the last case,
the name of the directory becomes the link, and you write in
&lt;code class=&#34;verbatim&#34;&gt;index.org&lt;/code&gt;.  The summary is handled automatically.  Of course, a link
in the menu or somewhere else is needed for readers to find the blog.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-7&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-7&#34;&gt;
Conclusion
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-7&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
There are still things to do to get the site I want (like adding a
publication list created from my &lt;code class=&#34;verbatim&#34;&gt;BibTex&lt;/code&gt; files, something I have yet
to figure out).  But I&amp;#39;ve succeeded in setting up a decent site, and
after the initial difficulties, producing and publishing content with
Hugo is proving a good experience.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Installing Debian GNU/Linux on the Lenovo V510</title>
      <link>https://tgrigera.github.io/en/post/debian-on-lenovo-v510/</link>
      <pubDate>Fri, 15 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://tgrigera.github.io/en/post/debian-on-lenovo-v510/</guid>
      <description>
&lt;p&gt;
I have recently installed Debian GNU/Linux on a Lenovo V510.  It got
working almost out of the box (I explain below what needed fixing),
and everything seems to be running now.  I experienced random freezing
of the machine at first, but the issue seems to be solved (see
below).&lt;/p&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-1&#34;&gt;
Installation
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-3&#34;&gt;
&lt;p&gt;
I did a net install of Debian 9.1 (stretch).  In the BIOS screen I
turned off secure boot and set boot mode to UEFI (no BIOS
compatibility).  I booted the installer from a CD.  The installer did
not recognise the wireless LAN, so I had to use the wired Ethernet
port.  The installer complained about missing firmware but it could
connect to the repositories and complete the installation.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-2&#34;&gt;
Missing firmware
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-3&#34;&gt;
&lt;p&gt;
The needed firmware can be downloaded with &lt;code class=&#34;verbatim&#34;&gt;aptitude&lt;/code&gt; or &lt;code class=&#34;verbatim&#34;&gt;apt-get&lt;/code&gt;
after first booting into the new system (you need to add the &lt;code&gt;nonfree&lt;/code&gt;
section of the repositories).  The needed packages are
&lt;code class=&#34;verbatim&#34;&gt;firmware-amd-graphics&lt;/code&gt;, &lt;code class=&#34;verbatim&#34;&gt;firmware-iwlwifi&lt;/code&gt;, and &lt;code class=&#34;verbatim&#34;&gt;firmware-realtek&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-3&#34;&gt;
Wireless LAN
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-3&#34;&gt;
&lt;p&gt;
After getting the firmware and rebooting, the firmware for the
graphics card and the Ethernet card was found and loaded.  The kernel
still complained about missing firmware for the WIFI card, but it
found and loaded an earlier version which works just fine.  Now the
card was found&lt;/p&gt;
&lt;pre class=&#34;example&#34;&gt;
$ ip address
wlp3s0: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc mq state UP group default qlen 1000
   link/ether 98:54:1b:76:36:3f brd ff:ff:ff:ff:ff:ff
&lt;/pre&gt;
&lt;p&gt;but it did not work.  The culprit (after some googling) turned out to
be the &lt;code class=&#34;verbatim&#34;&gt;ideapad_laptop&lt;/code&gt; module, which must be removed. I added the
line&lt;/p&gt;
&lt;pre class=&#34;example&#34;&gt;
blacklist ideapad_laptop
&lt;/pre&gt;
&lt;p&gt;to &lt;code class=&#34;verbatim&#34;&gt;/etc/modprobe.d/blacklist.conf&lt;/code&gt; and after rebooting the WIFI
started working&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-4&#34;&gt;
Bluetooth, sound, camera, SD card reader
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-4&#34; class=&#34;outline-text-3&#34;&gt;
&lt;p&gt;
All these worked out of the box.  I haven&amp;#39;t fully tested Bluetooth,
but it did find and connect to my phone.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-5&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-5&#34;&gt;
Fingerprint reader
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-5&#34; class=&#34;outline-text-3&#34;&gt;
&lt;p&gt;
Install &lt;code class=&#34;verbatim&#34;&gt;dirmngr&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34;example&#34;&gt;
sudo apt-get install dirmngr
&lt;/pre&gt;
&lt;p&gt;
then follow the instructions at &lt;a href=&#34;https://launchpad.net/~fingerprint/+archive/ubuntu/fingerprint-gui&#34;&gt;launchpad.net&lt;/a&gt;.  The device worked but
I cannot use it to log in with &lt;code class=&#34;verbatim&#34;&gt;gdm&lt;/code&gt; (it works for &lt;code class=&#34;verbatim&#34;&gt;sudo&lt;/code&gt;, which is
not particularly useful).  There is likely a configuration problem
related to &lt;code class=&#34;verbatim&#34;&gt;pam&lt;/code&gt; which I could not fix, and do not have the time to
dig into this.  But the hardware is working, and maybe you have better
luck with Ubuntu (the fingerprint packages are actually made for
Ubuntu, not Debian).&lt;/p&gt;
&lt;p&gt;
To uninstall fingerprint, remember to reinstall the appropriate
policykit, in my case for Gnome:&lt;/p&gt;
&lt;pre class=&#34;example&#34;&gt;
sudo apt-get install policykit-1-gnome
sudo apt-get remove fingerprint-gui
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-6&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-6&#34;&gt;
Freezing issue
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-6&#34; class=&#34;outline-text-3&#34;&gt;
&lt;p&gt;
After I got the machine up, I experienced several instance of complete
freezing (screen, keyboard, mouse) of the machine, which required
poweroff/poweron to recover.  It happened while reading PDFs with
&lt;code class=&#34;verbatim&#34;&gt;evince&lt;/code&gt;, apparently while trying to scroll the document.  It also
happened once during a video call.&lt;/p&gt;
&lt;p&gt;
Googling, I found several people reporting this issue, and several
culprits and solutions suggested.  Given the circumstances under which
it happened, I suspected video card or driver problems, and I found in
the ArchLinux wiki a reference to problems with the driver for the
Intel graphic card.  The wiki suggested disabling the 3D hardware
acceleration as a workaround, which I did following their
instructions.  I created the file &lt;code class=&#34;verbatim&#34;&gt;/etc/X11/xorg.conf.d/20-intel.conf&lt;/code&gt;
with the following content and rebooted:&lt;/p&gt;
&lt;pre class=&#34;example&#34;&gt;
Section &amp;#34;Device&amp;#34;

  Identifier &amp;#34;Intel Graphics&amp;#34;
  Driver     &amp;#34;intel&amp;#34;

  Option &amp;#34;DRI&amp;#34; &amp;#34;False&amp;#34;

EndSection
&lt;/pre&gt;
&lt;p&gt;The freezing has not occurred again since this configuration change.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Reference management with Emacs, BibTeX, and Zotero</title>
      <link>https://tgrigera.github.io/en/post/reference-management/</link>
      <pubDate>Wed, 23 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://tgrigera.github.io/en/post/reference-management/</guid>
      <description>
&lt;p&gt;
In this entry I describe what I use for reference and citation
management in Emacs.  It is nothing original, and relies on a couple
of excellent packages, to whose authors I am deeply indebted.
However, it took me a while to figure out which tools where most
suitable for me, so I share this summary in the hope that it may be of
help to others.&lt;/p&gt;
&lt;p&gt;
My setup allows me to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;get citations easily into my database from journals&amp;#39; websites or
from pdf metadata (&lt;code class=&#34;verbatim&#34;&gt;Zotero&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;backup the database and synchronise it among computers through the
cloud (&lt;code class=&#34;verbatim&#34;&gt;Zotero&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;export data to a BibTeX file, kept automatically updated,
from which various Emacs packages take the job (&lt;code class=&#34;verbatim&#34;&gt;Zotero&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;insert citations into LaTeX documents with a powerful and
convenient search interface (&lt;code class=&#34;verbatim&#34;&gt;reftex&lt;/code&gt; and &lt;code class=&#34;verbatim&#34;&gt;helm-bibtex&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;insert citations into org-mode documents, which correctly export to
LaTex and HTML (&lt;code class=&#34;verbatim&#34;&gt;org-ref&lt;/code&gt; and &lt;code class=&#34;verbatim&#34;&gt;helm-bibtex&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;open the article&amp;#39;s PDF from Emacs (from the link or through a
search interface)&lt;/li&gt;
&lt;li&gt;take notes about an article and get at them through the citation
link or a search interface (&lt;code class=&#34;verbatim&#34;&gt;helm-bibtex&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-1&#34;&gt;
Getting citations: Zotero
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-3&#34;&gt;
&lt;p&gt;
&lt;a href=&#34;http://www.zotero.org/&#34;&gt;Zotero&lt;/a&gt; is a reference database manager which can generate
bibliographies in different formats, which works as a standalone
application or as a Firefox extension (which is an especially
convenient way to add citations to the database).  It can also take a
PDF file and use the PDF metadata to find the appropriate citation.
It is widely documented online.&lt;/p&gt;
&lt;p&gt;
I use Zotero as a BibTeX manager.  That is, references are stored in
Zotero&amp;#39;s database (that I keep synchronised in the office and the
laptop through a Box.com account thanks to Zotero&amp;#39;s DAV support).
It is very convenient to collect references from websites and for
a quick search, but I do not use it to generate citations.  Instead, I
rely on &lt;a href=&#34;http://github.com/ZotPlus/zotero-better-bibtex&#34;&gt;BetterBibTex&lt;/a&gt; (a Zotero extension) to export to a &lt;code class=&#34;verbatim&#34;&gt;.bib&lt;/code&gt; file
(I freely use TeX markup in Zotero, which BetterBibTex respects if the
entry is marked with a &lt;code class=&#34;verbatim&#34;&gt;#LaTeX&lt;/code&gt; tag).  I write exclusively in Emacs
and insert references and generate bibliographies using several Emacs
packages, directly in LaTeX documents, or in org-mode documents which
get eventually exported to LaTeX or HTML.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-2&#34;&gt;
Writing in LaTeX
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-3&#34;&gt;
&lt;p&gt;
When writing directly a LaTeX document, I insert with &lt;code class=&#34;verbatim&#34;&gt;reftex&lt;/code&gt; or
&lt;a href=&#34;http://github.com/tmalsburg/helm-bibtex&#34;&gt;helm-bibtex&lt;/a&gt; (the first is bundled with Emacs, the second is
available from MELPA).  You need to specify the &lt;code class=&#34;verbatim&#34;&gt;.bib&lt;/code&gt; files you will
be using, plus some useful key-bindings.&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt; (setq reftex-default-bibliography &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/biblio/main.bib&amp;#34;&lt;/span&gt;) )
 (setq helm-bibtex-bibliography &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/biblio/main.bib&amp;#34;&lt;/span&gt;)
 (add-hook &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;TeX-mode-hook&lt;/span&gt;
   (lambda() (&lt;span style=&#34;color:#a6e22e&#34;&gt;define-key&lt;/span&gt; TeX-mode-map &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\C-ch&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;helm-bibtex&lt;/span&gt;)) )&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Both packages, when you hit the chosen keybinding (for &lt;code class=&#34;verbatim&#34;&gt;reftex&lt;/code&gt;
it is &lt;code class=&#34;verbatim&#34;&gt;C-c [&lt;/code&gt; by default), open a search window from which you select
the reference (powerful regexp-based queries are possible, check the
respective documentations) and a &lt;code class=&#34;verbatim&#34;&gt;\cite&lt;/code&gt; or similar command is
inserted for you.  I have not explored &lt;code class=&#34;verbatim&#34;&gt;helm-bibtex&lt;/code&gt; sufficiently to
have an opinion on which interface is superior as regards the search
facilities.  However, &lt;code class=&#34;verbatim&#34;&gt;helm-bibtex&lt;/code&gt; has the ability to open the PDF
file and the notes related to the reference (see below).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-3&#34;&gt;
Writing in org-mode
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-3&#34;&gt;
&lt;p&gt;
When writing org-mode documents, I insert citations with &lt;a href=&#34;http://github.com/jkitchin/org-ref&#34;&gt;org-ref&lt;/a&gt;
(available from MELPA).  I changed the key binding from &lt;code class=&#34;verbatim&#34;&gt;C-c ]&lt;/code&gt; to
&lt;code class=&#34;verbatim&#34;&gt;C-c [&lt;/code&gt; to have it the same as &lt;code class=&#34;verbatim&#34;&gt;reftex&lt;/code&gt; (though this hides another
&lt;code class=&#34;verbatim&#34;&gt;org-mode&lt;/code&gt; key).  &lt;code class=&#34;verbatim&#34;&gt;org-ref&lt;/code&gt; opens &lt;code class=&#34;verbatim&#34;&gt;helm-bibtex&lt;/code&gt; for the search, but
inserts the citation in its own format (as &lt;code class=&#34;verbatim&#34;&gt;cite:key&lt;/code&gt;).  This is
converted to the appropriate LaTeX command on export; you also need to
include bibliography and bibliographystyle links at some place in the
document (usually the end) to get the reference list at that point:&lt;/p&gt;
&lt;pre class=&#34;example&#34;&gt;
bibliographystyle:unsrtnat
bibliography:~/biblio/main.bib
&lt;/pre&gt;
&lt;p&gt;
&lt;code class=&#34;verbatim&#34;&gt;org-ref&lt;/code&gt; supports other link types besides citation links (like
references to figures or other labels).  Check out the documentation.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-4&#34;&gt;
Opening the article&amp;#39;s PDF
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-4&#34; class=&#34;outline-text-3&#34;&gt;
&lt;p&gt;
From the &lt;code class=&#34;verbatim&#34;&gt;helm-bibtex&lt;/code&gt; search window, one of the actions is to open
the pdf.  This relies on a link in the corresponding BiBTeX entry.
When exporting from Zotero, the files are listed in a &lt;code class=&#34;verbatim&#34;&gt;file&lt;/code&gt; field
(there is no need to export both entries and files, since BetterBibTex
will link directly to the Zotero attached file).  You must tell
&lt;code class=&#34;verbatim&#34;&gt;helm-bibtex&lt;/code&gt; which field to look for.  It will open all the specified
files, by default in Emacs itself, but you can change this to another
viewer as shown:&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(setq bibtex-completion-pdf-field &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;file&amp;#34;&lt;/span&gt;)
(setq bibtex-completion-pdf-open-function
  (lambda (fpath)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;start-process&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;evince&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;*helm-bibtex-evince*&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/usr/bin/evince&amp;#34;&lt;/span&gt; fpath)))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
(The names &lt;code class=&#34;verbatim&#34;&gt;helm-bibtex-pdf-field&lt;/code&gt; and &lt;code class=&#34;verbatim&#34;&gt;helm-bibtex-pdf-open-function&lt;/code&gt;
were formerly used for variables &lt;code class=&#34;verbatim&#34;&gt;bibtex-completion-pdf-field&lt;/code&gt; and
&lt;code class=&#34;verbatim&#34;&gt;bibtex-completion-pdf-open-function&lt;/code&gt; and still work as aliases).&lt;/p&gt;
&lt;p&gt;
If you move to an already-entered citation command, in both LaTeX and
Org modes the minibuffer shows information on the cited entry.  In
Org, you can click with the mouse for additional options (an approach
I don&amp;#39;t like).  One of the options is open the PDF file, but I haven&amp;#39;t
been able to get it to work.  Another option is to open the
&lt;code class=&#34;verbatim&#34;&gt;helm-bibtex&lt;/code&gt; search window and insert the citation key as a search
term: this will get directly to the entry, and then one can invoke the
open PDF action as if the whole process originated from a search from
scratch.  This is almost what I want, except that inserting the key is
not straightforward.  In principle, typing &lt;code class=&#34;verbatim&#34;&gt;M-n&lt;/code&gt; with the search
window open inserts the word-at-point in the minibuffer.  This is
great except that sometimes the keys comprise more than one word
(because they include characters such as colons or underscores).  Then
&lt;code class=&#34;verbatim&#34;&gt;M-n&lt;/code&gt; doesn&amp;#39;t work.  For multiword keys, one can use &lt;code class=&#34;verbatim&#34;&gt;C-w&lt;/code&gt;, which
inserts from point to end of word, and inserts the following words on
repeating the key.  However, apart from the multiple key presses, this
will only work if the point is exactly at the beginning of the key.
This is an issue, while minor, I would like to fix but currently don&amp;#39;t
know how.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-5&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-5&#34;&gt;
Notes
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-5&#34; class=&#34;outline-text-3&#34;&gt;
&lt;p&gt;
With &lt;code class=&#34;verbatim&#34;&gt;helm-bibtex&lt;/code&gt; one can link BibTeX entries to notes in an
&lt;code class=&#34;verbatim&#34;&gt;org-mode&lt;/code&gt; file.  I use a single &lt;code class=&#34;verbatim&#34;&gt;.org&lt;/code&gt; file for all bibliographic
notes, which can be accessed as one of the actions (press &lt;code class=&#34;verbatim&#34;&gt;TAB&lt;/code&gt;) from
the &lt;code class=&#34;verbatim&#34;&gt;helm-bibtex&lt;/code&gt; search window.  The file is specified in your
&lt;code class=&#34;verbatim&#34;&gt;.emacs&lt;/code&gt; with something like&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(setq helm-bibtex-notes-path &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/doc/apuntes/bibnotes.org&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
You can also access the notes from a previously-inserted citation like
you access the PDF (except you select a different action from the
search window).  All comments above apply also to opening the notes.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-6&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-6&#34;&gt;
Conclusion
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-6&#34; class=&#34;outline-text-3&#34;&gt;
&lt;p&gt;
I am rather happy with this solution for reference management, which
combines the best of Zotero&amp;#39;s convenience for getting references in a
database with the power of the Emacs tools described above to make
effective use of the database.  However, it is only recently that I
discovered &lt;code class=&#34;verbatim&#34;&gt;org-ref&lt;/code&gt; and &lt;code class=&#34;verbatim&#34;&gt;helm-bibtex&lt;/code&gt;, so I expect to learn more on
them and hopefully share on updates to this post.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>How I created my web home</title>
      <link>https://tgrigera.github.io/en/post/how-i-created-my-homepage/</link>
      <pubDate>Sat, 01 Aug 2015 01:18:59 +0000</pubDate>
      
      <guid>https://tgrigera.github.io/en/post/how-i-created-my-homepage/</guid>
      <description>
&lt;p&gt;
This website is made of static html pages generated by &lt;a href=&#34;https://getnikola.com&#34;&gt;Nikola&lt;/a&gt; from
&lt;a href=&#34;https://www.gnu.org/software/emacs/emacs.html&#34;&gt;Emacs&lt;/a&gt; &lt;a href=&#34;http://orgmode.org&#34;&gt;Orgmode&lt;/a&gt; sources (I&amp;#39;ve learnt to stay away from CMSs).  Nikola is
a Python package that translates a collection of plain-text sources in
a variety of markup languages to html, providing support for blogging
and commenting, and visually styling the site through different
themes.  Themes in turn rely on an independent template system (it can
be &lt;a href=&#34;http://www.makotemplates.org/&#34;&gt;Mako&lt;/a&gt; or &lt;a href=&#34;http://jinja.pocoo.org/&#34;&gt;Jinja2&lt;/a&gt;) plus a set of CSS and font files (and some themes
support replacing CSSs and fonts using a &lt;a href=&#34;http://bootswatch.com&#34;&gt;bootswatch&lt;/a&gt; theme).&lt;/p&gt;
&lt;p&gt;
This leverage of external tools is certainly a smart choice of
Nikola&amp;#39;s designers, but it is rather confusing to website newbies like
me.  I also found Nikola&amp;#39;s documentation a bit hard to follow, not
knowing these external tools, as the roles of the different tools are
not clearly explained (it is probably clear enough if you have some
experience in web publishing, but it is not my case).  I would probaby
have given up on Nikola but for this wonderful &lt;a href=&#34;http://shisaa.jp/postset/nikola-web.html&#34;&gt;post&lt;/a&gt; on &lt;a href=&#34;http://shisaa.jp&#34;&gt;shisaa.jp&lt;/a&gt;) So
it was a bit hard starting up, but the effort has paid.  (By the way,
if a Nikola guru ever reads this post, I would be happy to stand
corrected on the rough summary of Nikola above).&lt;/p&gt;
&lt;p&gt;
For what is worth, here is a summary of how I proceeded.  It is pretty
straightforward now that is done, except perhaps for the publication
list part, which I had to put together myself and maybe of use to
others.&lt;/p&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
Nikola setup
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
I installed Nikola with &lt;code class=&#34;verbatim&#34;&gt;pip&lt;/code&gt; as explained in the documentation.  I
added the orgmode plugin with&lt;/p&gt;
&lt;pre class=&#34;example&#34;&gt;
nikola plugin --install orgmode
&lt;/pre&gt;
&lt;p&gt;
After creating an empty site with &lt;code class=&#34;verbatim&#34;&gt;nikola init&lt;/code&gt;, one must tune the
&lt;code&gt;conf.py&lt;/code&gt; script.  This is well commented and mostly straightforward.
The more delicate variables were &lt;code class=&#34;verbatim&#34;&gt;POST&lt;/code&gt; and &lt;code class=&#34;verbatim&#34;&gt;PAGES&lt;/code&gt;,
which define the input and output directories, &lt;code class=&#34;verbatim&#34;&gt;INDEX_PATH&lt;/code&gt;, which
specifies the destination of the post index (and which you must change
if you want a site, like this one, which is not primarily a blog), and
&lt;code class=&#34;verbatim&#34;&gt;TRANSLATIONS&lt;/code&gt;, which defines where the different translations will be
placed.  By default, the &lt;code class=&#34;verbatim&#34;&gt;DEFAULT_LANG&lt;/code&gt; is put in the &lt;code&gt;output&lt;/code&gt;
directory, with translations in subdirectories. I opted for a more
symmetrical structure with a subdirectory for each language (two in my
case), so that translating a file requires less work (for example,
language-free images can be included specifying the same relative
path).&lt;/p&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-2&#34;&gt;
Theme
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-3&#34;&gt;
&lt;p&gt;
I chose one of Nikola&amp;#39;s built-in themes.  While it is possible to
derive from a theme to tweak it to your liking (e.g. by adding custom
CSS), I just don&amp;#39;t know enough CSS to do it without messing up, so I
stuck to what is provided by the distribution.&lt;/p&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-4&#34;&gt;
&lt;h4 id=&#34;headline-3&#34;&gt;
CSS for code highlighting
&lt;/h4&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-4&#34;&gt;
&lt;p&gt;
The Orgmode plugin needs additional CSS to give syntax highlighting
(which gives the additional flexibility of choosing the color
scheme).  It is done through &lt;code class=&#34;verbatim&#34;&gt;pygment&lt;/code&gt;, and the CSS is generated with
something like&lt;/p&gt;
&lt;pre class=&#34;example&#34;&gt;
pygmentize -S emacs -a .highlight -f html &amp;gt;&amp;gt;custom.css
&lt;/pre&gt;
&lt;p&gt;
The &lt;code&gt;custom.css&lt;/code&gt; file must then be placed in the &lt;code&gt;assets/css&lt;/code&gt;
subdirectory of the theme in use (check that the &lt;code&gt;bundles&lt;/code&gt; file
includes it).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-4&#34;&gt;
Comments
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-4&#34; class=&#34;outline-text-3&#34;&gt;
&lt;p&gt;
Nikola supports several third-party comment systems.  I am currently
experimenting with Disqus.  Setup involves simply setting the
variables &lt;code class=&#34;verbatim&#34;&gt;COMMENT_SYSTEM&lt;/code&gt; and &lt;code class=&#34;verbatim&#34;&gt;COMMENT_SYSTEM_ID&lt;/code&gt; in &lt;code&gt;conf.py&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-5&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-5&#34;&gt;
The publication list
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-5&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
My bibliography (including references to my own publications) is
stored in &lt;a href=&#34;http://zotero.org&#34;&gt;Zotero&lt;/a&gt;.  Although there are tools to create html directly
from Zotero collections, there was none I could get working to my
satisfaction.  So presently the publication list is created from a
&lt;code class=&#34;verbatim&#34;&gt;BibTex&lt;/code&gt; file using &lt;code class=&#34;verbatim&#34;&gt;bibtex2html&lt;/code&gt; to produce a bare html list, to
which I add the Nikola header and then treat like a regular Nikola
page.&lt;/p&gt;
&lt;p&gt;
The &lt;code&gt;.bib&lt;/code&gt; file comes from the Zotero collection which holds my
publications, from which it is exported with &lt;code class=&#34;verbatim&#34;&gt;BetterBibTex&lt;/code&gt; (a Zotero
plugin).  I include attached files in the export to be able to serve
the articles&amp;#39; pdf, but the &lt;code&gt;.bib&lt;/code&gt; file needs filtering before it can
be fed to &lt;code class=&#34;verbatim&#34;&gt;bibtex2html&lt;/code&gt; because the &lt;code&gt;file&lt;/code&gt; field is formatted as
&lt;code class=&#34;verbatim&#34;&gt;:name:path:application/pdf&lt;/code&gt;, and can have more than one file (Zotero
stores journal site snapshots and files like supporting information as
well).  I also need to change the relative path so that the pdfs are
correctly linked.  All this is done with &lt;code class=&#34;verbatim&#34;&gt;sed&lt;/code&gt; (long live regexps!).&lt;/p&gt;
&lt;p&gt;
The three steps (filtering, converting and building the source page
for Nikola) are done in the following &lt;code class=&#34;verbatim&#34;&gt;bash&lt;/code&gt; script (assuming the
desired Zotero collections has been exported in subdirectory &lt;code&gt;own&lt;/code&gt;):&lt;/p&gt;
&lt;div class=&#34;src src-sh&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;#!/bin/bash&lt;/span&gt;
  sed &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/file =/ {
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;       s%\([{;]\)[^:;]*:\([^:;]*\):application/pdf\([;}]\)%\1\2\3%;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;       s%{[^:;]*:[^:;]*:[^:;]*;%{%;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;       s%;[^:;]*:[^:;]*:[^:;]*;%;%;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;       s%;[^:;]*:[^:;]*:[^:;]*}%}%;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;       s%{files/%{../../files/%;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;       } &amp;#39;&lt;/span&gt; own/own.bib &amp;gt;own/own-f.bib
  echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\def\BIBand{y}&amp;#34;&lt;/span&gt; &amp;gt;macros.tex
  echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\def\backslash{\\}&amp;#34;&lt;/span&gt; &amp;gt;&amp;gt;macros.tex
  SDIR&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;../personal
  ODIR&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;SDIR&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;/main/personal
  bibtex2html --nodoc --no-abstract --no-keywords --unicode --named-field file pdf --sort-as-bibtex --macros-from macros.tex --style sp_yearorder_authorsc -o publist own/own-f.bib
  cat pubhead.html publist.html &amp;gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;ODIR&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;/publist.html
  cat pubhead_bib.html publist_bib.html &amp;gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;ODIR&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;/publist_bib.html
  bibtex2html --nodoc --no-abstract --no-keywords --unicode --named-field file pdf --sort-as-bibtex --macros-from macros.tex --style en_yearorder -o publist own/own-f.bib
  cat pubhead.en.html publist.html &amp;gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;ODIR&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;/publist.en.html
  cat pubhead_bib.en.html publist_bib.html &amp;gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;ODIR&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;/publist_bib.en.html
  ln -s -f $PWD/own/files $SDIR/files&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
The four headers (&lt;code class=&#34;verbatim&#34;&gt;pubhead.html&lt;/code&gt;, etc.) are obvious variations of the
following:&lt;/p&gt;
&lt;pre class=&#34;example&#34;&gt;
.. title: Publicaciones
.. slug: publist
.. date: 2015-07-31 10:24:50 UTC-03:00
.. tags: 
.. category: 
.. link: 
.. description: 
.. type: text
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Identifying disks by UUID</title>
      <link>https://tgrigera.github.io/en/post/identifying-disks-by-uuid/</link>
      <pubDate>Thu, 30 Jul 2015 20:16:50 +0000</pubDate>
      
      <guid>https://tgrigera.github.io/en/post/identifying-disks-by-uuid/</guid>
      <description>&lt;p&gt;
To get a the UUID of a disk, do&lt;/p&gt;
&lt;pre class=&#34;example&#34;&gt;
$ sudo blkid /dev/sdb1
/dev/sdb1: UUID=&amp;#34;a48cf280-fcc7-4283-ab31-5a23440bd2fa&amp;#34; TYPE=&amp;#34;ext4&amp;#34; 
&lt;/pre&gt;
&lt;p&gt;
Now you can refer to the device as &lt;code&gt;/dev/disk-by-uuid/xxx&lt;/code&gt;.  Or you
can mount by UUID from fstab as follows:&lt;/p&gt;
&lt;pre class=&#34;example&#34;&gt;
UUID=a48cf280-fcc7-4283-ab31-5a23440bd2fa /external	ext4	rw,user,noauto
&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Using babel and xypic</title>
      <link>https://tgrigera.github.io/en/post/babel-and-xpic/</link>
      <pubDate>Fri, 11 Dec 2009 00:00:00 +0000</pubDate>
      
      <guid>https://tgrigera.github.io/en/post/babel-and-xpic/</guid>
      <description>&lt;p&gt;
As widely documented, babel redefines the catcode for several
characters, making xypic pictures to fail. The cure is to use
&lt;code class=&#34;verbatim&#34;&gt;\shorthandoff{}&lt;/code&gt;, like this (the spanish option redefines &amp;#34;):&lt;/p&gt;
&lt;pre class=&#34;example&#34;&gt;
\shortandoff{&amp;#34;}
\xy (stuff) \endxy
\shorthandon{&amp;#34;}
&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Burning mixed CDs</title>
      <link>https://tgrigera.github.io/en/post/burning-mixed-cds/burning-mixed-cds/</link>
      <pubDate>Thu, 10 Dec 2009 19:19:26 +0000</pubDate>
      
      <guid>https://tgrigera.github.io/en/post/burning-mixed-cds/burning-mixed-cds/</guid>
      <description>&lt;p&gt;
There are two ways to mix audio and data on a CD. The first is to use
a single session, using the first track for data and the rest for
audio (this works because most CD players will ignore the data
track). The command (Debian) is something like&lt;/p&gt;
&lt;pre class=&#34;example&#34;&gt;
wodim -v dev=/dev/cdrom -data cdimage.raw -audio track*.cdaudio
&lt;/pre&gt;
&lt;p&gt;
The second option is the best according to advice I’ve found, and the
only I’ve actually tried. It’s to burn a two-session CD, puting audio
in the first session and data in the second. This second session is
ignored by players, but can be read by a computer when you mount the
CD.&lt;/p&gt;
&lt;p&gt;
This is how you do it: First, burn the audio:&lt;/p&gt;
&lt;pre class=&#34;example&#34;&gt;
wodim -v dev=/dev/cdrom [-sao] -multi -audio  *.wav
&lt;/pre&gt;
&lt;p&gt;
(-v = verbose, -sao = session-at-once). Now find and save the number
of the last record written:&lt;/p&gt;
&lt;pre class=&#34;example&#34;&gt;
NEXT_TRACK=$(cdrecord -msinfo)
&lt;/pre&gt;
&lt;p&gt;
Create the image:&lt;/p&gt;
&lt;pre class=&#34;example&#34;&gt;
genisoimage -o image.iso -r -J -C $NEXT_TRACK cd-data/*
&lt;/pre&gt;
&lt;p&gt;
(-J = Joliet, -r = intelligent Rock Ridge, -C = starting sector). To
verify the image:&lt;/p&gt;
&lt;pre class=&#34;example&#34;&gt;
isoinfo -i cd_plus.iso -f -R -J -N ${NEXT_TRACK/*,}
&lt;/pre&gt;
&lt;p&gt;
Finally, burn the second session:&lt;/p&gt;
&lt;pre class=&#34;example&#34;&gt;
wodim dev=/dev/cdrom -eject -data cd_plus.iso
&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Converting among graphic formats</title>
      <link>https://tgrigera.github.io/en/post/converting-graphic-formats/</link>
      <pubDate>Sat, 17 Oct 2009 20:02:06 +0000</pubDate>
      
      <guid>https://tgrigera.github.io/en/post/converting-graphic-formats/</guid>
      <description>
&lt;p&gt;
Command-line utilities to convert between graphic formats I have found useful:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;eps to pdf: ps2pdf with -dEPSCrop option to produce the pdf
“bounding box”&lt;/li&gt;
&lt;li&gt;epstopdf (part of texlive package). Seems better than the above,
automatically uses bounding box and respects orientation.&lt;/li&gt;
&lt;li&gt;convert is a command-line tool to convert among various
formats. Very easy basic usage (assumes target format from file
extension). Part of ImageMagic.&lt;/li&gt;
&lt;li&gt;pdftk is a tool to manipulate pdf files (split, join and much
more).&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-1&#34;&gt;
Extracting images from MSWord documents
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-3&#34;&gt;
&lt;p&gt;
The best way is to save the document as web page (from the File menu)
and look in the directory for the image files.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Creating BibTex styles</title>
      <link>https://tgrigera.github.io/en/post/creating-bibtex-styles/</link>
      <pubDate>Fri, 16 Oct 2009 00:00:00 +0000</pubDate>
      
      <guid>https://tgrigera.github.io/en/post/creating-bibtex-styles/</guid>
      <description>&lt;p&gt;
To create a new BibTeX style, run&lt;/p&gt;
&lt;pre class=&#34;example&#34;&gt;
latex makebst.tex
&lt;/pre&gt;
&lt;p&gt;to  proceed through  a long  list of  questions about  the  style. The
result is another file that will  produce a .bst file after running it
through LaTeX again. If you change  your mind about an answer, you can
edit the intermediate file, it has pretty obvious format.&lt;/p&gt;
&lt;p&gt;
Check this &lt;a href=&#34;http://chenfuture.wordpress.com/2007/09/24/diy-your-bibtex-style-file&#34;&gt;post&lt;/a&gt; for more information about .bst files.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
